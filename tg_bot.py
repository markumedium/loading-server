import time
import requests
import threading
import json
import os
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta, timezone

BOT_TOKEN = "7705882526:AAG0ZaDbFjNxGRe7-TGbAVSEIrwKuOmOW0k"
CHAT_ID = "-1002540325886"

DATA_PATH = "status_history"
TRUCKS_PATH = "trucks.json"
SEND_HOUR_UTC = 14  # 19:00 –ø–æ UTC+5
notified_trucks = {}

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def load_json(path):
    if os.path.exists(path):
        with open(path, "r") as f:
            return json.load(f)
    return {}

def load_trucks():
    if os.path.exists(TRUCKS_PATH):
        with open(TRUCKS_PATH, "r") as f:
            return json.load(f)
    return []

# ========== –û–¢–ü–†–ê–í–ö–ê ==========
def send_to_telegram(text=None, image_path=None, reply_markup=None):
    if text:
        data = {
            "chat_id": CHAT_ID,
            "text": text,
            "parse_mode": "Markdown"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", data=data)
    if image_path:
        with open(image_path, 'rb') as f:
            requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto",
                          files={"photo": f},
                          data={"chat_id": CHAT_ID})

# ========== PNG –û–¢–ß–Å–¢ ==========
def generate_png_report(date_str):
    path = f"report_{date_str}.png"
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG
    # –°–µ–π—á–∞—Å –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    with open(path, "wb") as f:
        f.write(b"Fake PNG content")
    return path

# ========== PDF –û–¢–ß–Å–¢ ==========
def generate_pdf_report(date_str):
    path = f"report_{date_str}.pdf"
    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
    with open(path, "wb") as f:
        f.write(b"Fake PDF content")
    return path

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ==========
def handle_command(text):
    text = text.lower().strip()
    if "–æ—Ç—á–µ—Ç" in text:
        send_to_telegram(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:",
            reply_markup={
                "inline_keyboard": [
                    [{"text": "üì∑ PNG", "callback_data": "report_png"}],
                    [{"text": "üìÑ PDF", "callback_data": "report_pdf"}]
                ]
            }
        )

def handle_callback(callback_data):
    today = datetime.now().strftime("%Y-%m-%d")
    if callback_data == "report_png":
        path = generate_png_report(today)
        send_to_telegram(image_path=path)
    elif callback_data == "report_pdf":
        path = generate_pdf_report(today)
        send_to_telegram(text=f"PDF-—Ñ–∞–π–ª: {today}", image_path=path)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô ==========
def check_updates():
    offset = None
    while True:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        if offset:
            url += f"?offset={offset}"
        try:
            resp = requests.get(url).json()
            for result in resp.get("result", []):
                offset = result["update_id"] + 1
                if "message" in result:
                    msg = result["message"]
                    text = msg.get("text", "")
                    handle_command(text)
                elif "callback_query" in result:
                    data = result["callback_query"]["data"]
                    handle_callback(data)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ check_updates:", e)
        time.sleep(3)

# ========== –°–¢–ê–†–¢ ==========
def start_telegram_bot():
    print("[Telegram] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
    threading.Thread(target=check_updates, daemon=True).start()

start_telegram_bot()
