import time
import requests
import threading
import json
import os
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet

BOT_TOKEN = "7705882526:AAG0ZaDbFjNxGRe7-TGbAVSEIrwKuOmOW0k"
CHAT_ID = "-1002540325886"

DATA_PATH = "status_history"
TRUCKS_PATH = "trucks.json"
SEND_HOUR_UTC = 14  # 19:00 –ø–æ UTC+5
notified_trucks = {}
report_pending = False
processed_callbacks = set()

# === –£–¢–ò–õ–ò–¢–´ ===
def load_json(path):
    if os.path.exists(path):
        with open(path, "r") as f:
            return json.load(f)
    return {}

def load_trucks():
    return load_json(TRUCKS_PATH)

def send_to_telegram(text=None, image_path=None, reply_markup=None, delete_menu_id=None):
    if delete_menu_id:
        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/deleteMessage", data={
            "chat_id": CHAT_ID,
            "message_id": delete_menu_id
        })
    if text:
        data = {
            "chat_id": CHAT_ID,
            "text": text,
            "parse_mode": "Markdown"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", data=data)
    if image_path:
        with open(image_path, 'rb') as f:
            requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument",
                          files={"document": f},
                          data={"chat_id": CHAT_ID})
        os.remove(image_path)

# === –û–¢–ß–ï–¢–´ ===
def build_report_rows(trucks, history, current_only=True):
    statuses = ['–û—Ç–≥—Ä—É–∂–∞–µ—Ç—Å—è', '–ì–æ—Ç–æ–≤ –∫ –≤—ã–µ–∑–¥—É', '–í—ã–µ—Ö–∞–ª']
    result = []
    for t in trucks:
        tid = t['id']
        model = t['model']
        plate = t['licensePlate']
        cycle = t.get('cycle', 1)
        status = t.get('status', '-')
        changes = history.get(tid, [])
        per_status = {s: ('', '') for s in statuses}
        blocks = {}
        for ch in changes:
            blocks.setdefault(ch['cycle'], []).append((ch['status'], ch['timestamp']))

        if current_only:
            block = blocks.get(cycle, [])
            for i in range(1, len(block)):
                s1, t1 = block[i-1]
                s2, t2 = block[i]
                if s1 in per_status:
                    per_status[s1] = (
                        datetime.utcfromtimestamp(t1).strftime("%H:%M"),
                        str(timedelta(seconds=t2 - t1))
                    )
            if block:
                ls, lt = block[-1]
                if ls in per_status:
                    per_status[ls] = (
                        datetime.utcfromtimestamp(lt).strftime("%H:%M"),
                        str(timedelta(seconds=int(time.time() - lt)))
                    )
            result.append([
                model, plate, status,
                *(f"({per_status[s][0]}) {per_status[s][1]}" if per_status[s][0] else '' for s in statuses),
                cycle
            ])
        else:
            for c in sorted(blocks):
                if c >= cycle:
                    continue
                blk = blocks[c]
                tmap = {s: None for s in statuses}
                for s, ts in blk:
                    if s in tmap:
                        tmap[s] = ts
                times = {}
                for i, s in enumerate(statuses):
                    if tmap[s]:
                        st = datetime.utcfromtimestamp(tmap[s]).strftime("%H:%M")
                        end = None
                        for j in range(i + 1, len(statuses)):
                            if tmap[statuses[j]]:
                                end = tmap[statuses[j]]
                                break
                        delta = str(timedelta(seconds=int(end - tmap[s]))) if end else '‚Äî'
                        times[s] = (st, delta)
                    else:
                        times[s] = ('', '')
                result.append([
                    model, plate, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                    *(f"({times[s][0]}) {times[s][1]}" if times[s][0] else '' for s in statuses),
                    c
                ])
    return result

def generate_png_report(date_str):
    trucks = load_trucks()
    history = load_json(os.path.join(DATA_PATH, f"{date_str}.json"))
    headers = ["–ú–æ–¥–µ–ª—å", "–ì–æ—Å–Ω–æ–º–µ—Ä", "–°—Ç–∞—Ç—É—Å", "–û—Ç–≥—Ä—É–∂–∞–µ—Ç—Å—è", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–µ–∑–¥—É", "–í—ã–µ—Ö–∞–ª", "–¶–∏–∫–ª"]
    data = build_report_rows(trucks, history, True)
    data += [[""] * len(headers)] + [["–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –†–ï–ô–°–´"] + [""] * (len(headers) - 1)]
    data += build_report_rows(trucks, history, False)

    df = pd.DataFrame(data, columns=headers)
    fig, ax = plt.subplots(figsize=(14, len(df) * 0.4 + 2))
    ax.axis('off')
    tbl = ax.table(cellText=df.values, colLabels=df.columns, loc='center', cellLoc='center')
    tbl.auto_set_font_size(False)
    tbl.set_fontsize(9)
    path = f"report_{date_str}.png"
    plt.savefig(path, bbox_inches='tight')
    plt.close()
    return path

def generate_pdf_report(date_str):
    trucks = load_trucks()
    history = load_json(os.path.join(DATA_PATH, f"{date_str}.json"))
    headers = ["–ú–æ–¥–µ–ª—å", "–ì–æ—Å–Ω–æ–º–µ—Ä", "–°—Ç–∞—Ç—É—Å", "–û—Ç–≥—Ä—É–∂–∞–µ—Ç—Å—è", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–µ–∑–¥—É", "–í—ã–µ—Ö–∞–ª", "–¶–∏–∫–ª"]
    data = [headers]
    data += build_report_rows(trucks, history, True)
    data += [[""] * len(headers), ["–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –†–ï–ô–°–´"] + [""] * (len(headers) - 1)]
    data += build_report_rows(trucks, history, False)

    path = f"report_{date_str}.pdf"
    doc = SimpleDocTemplate(path, pagesize=landscape(A4))
    styles = getSampleStyleSheet()
    elements = [Paragraph(f"<b>–û—Ç—á–µ—Ç –∑–∞ {date_str}</b><br/>(–≤ —Å–∫–æ–±–∫–∞—Ö ‚Äî –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ç—É—Å–∞)", styles['Title'])]
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('GRID', (0, 0), (-1, -1), 0.25, colors.grey),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
    ]))
    elements.append(table)
    doc.build(elements)
    return path

# === –û–ü–û–í–ï–©–ï–ù–ò–ï ===
def check_long_loading():
    today = datetime.now().strftime("%Y-%m-%d")
    trucks = load_trucks()
    history = load_json(os.path.join(DATA_PATH, f"{today}.json"))
    for truck in trucks:
        if truck['status'] != "–û—Ç–≥—Ä—É–∂–∞–µ—Ç—Å—è":
            continue
        tid = truck['id']
        cycle = truck.get('cycle', 1)
        entries = history.get(tid, [])
        start_time = None
        for entry in reversed(entries):
            if entry['status'] == "–û—Ç–≥—Ä—É–∂–∞–µ—Ç—Å—è" and entry['cycle'] == cycle:
                start_time = entry['timestamp']
                break
        if start_time and time.time() - start_time >= 300 and notified_trucks.get(tid) != cycle:
            start_str = datetime.utcfromtimestamp(start_time).strftime("%H:%M")
            dur = str(timedelta(seconds=int(time.time() - start_time)))
            msg = f"üö® *–í–ù–ò–ú–ê–ù–ò–ï*\n{truck['model']} / {truck['licensePlate']}\n–û—Ç–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–æ–ª–µ–µ 5 –º–∏–Ω\n({start_str}), –ø—Ä–æ—à–ª–æ: {dur}"
            send_to_telegram(msg)
            notified_trucks[tid] = cycle

# === –û–ë–†–ê–ë–û–¢–ö–ê ===
def handle_command(text):
    global report_pending
    if report_pending:
        return
    text = text.lower()
    if "/–æ—Ç—á–µ—Ç" in text or "/otchet" in text:
        report_pending = True
        resp = requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", data={
            "chat_id": CHAT_ID,
            "text": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:",
            "reply_markup": json.dumps({
                "inline_keyboard": [
                    [{"text": "üì∑ PNG", "callback_data": "report_png"}],
                    [{"text": "üìÑ PDF", "callback_data": "report_pdf"}]
                ]
            })
        }).json()
        global last_menu_msg_id
        last_menu_msg_id = resp.get("result", {}).get("message_id")
    elif "/status" in text:
        txt = "*–¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:*\n" + "\n".join(f"{t['model']} / {t['licensePlate']}: {t['status']}" for t in load_trucks())
        send_to_telegram(txt)
    elif "/mashina" in text:
        btns = [[{"text": f"{t['model']} ({t['licensePlate']})", "callback_data": f"info_{t['id']}"}] for t in load_trucks()]
        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", data={
            "chat_id": CHAT_ID,
            "text": "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:",
            "reply_markup": json.dumps({"inline_keyboard": btns})
        })

def handle_callback(data, callback_id):
    global report_pending
    if callback_id in processed_callbacks:
        return
    processed_callbacks.add(callback_id)
    today = datetime.now().strftime("%Y-%m-%d")
    if data == "report_png":
        path = generate_png_report(today)
        send_to_telegram(image_path=path, delete_menu_id=last_menu_msg_id)
        report_pending = False
    elif data == "report_pdf":
        path = generate_pdf_report(today)
        send_to_telegram(text=f"PDF: {today}", image_path=path, delete_menu_id=last_menu_msg_id)
        report_pending = False
    elif data.startswith("info_"):
        tid = data.replace("info_", "")
        t = next((x for x in load_trucks() if x['id'] == tid), None)
        if t:
            send_to_telegram(f"*–ò–Ω—Ñ–æ:*\n{t['model']} / {t['licensePlate']}\n–°—Ç–∞—Ç—É—Å: {t['status']}\n–¶–∏–∫–ª: {t.get('cycle', '-')}")


def check_updates():
    offset = None
    while True:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
            if offset:
                url += f"?offset={offset}"
            resp = requests.get(url).json()
            for r in resp.get("result", []):
                offset = r["update_id"] + 1
                if "message" in r:
                    text = r["message"].get("text", "")
                    handle_command(text)
                elif "callback_query" in r:
                    handle_callback(r["callback_query"]["data"], r["callback_query"]["id"])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ check_updates:", e)
        time.sleep(3)

def loop_interval(fn, sec):
    while True:
        fn()
        time.sleep(sec)

def start_telegram_bot():
    print("[Telegram] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
    threading.Thread(target=check_updates, daemon=True).start()
    threading.Thread(target=lambda: loop_interval(check_long_loading, 60), daemon=True).start()

start_telegram_bot()
